@page "/NivelJerarquico"
@using System.Net.Http.Json
@inject HttpClient httpClient
@using SancionadosSAGB2025.Shared.Catalogos
@using SancionadosSAGB2025.Client.Shared.Partial.Cards;
@using SancionadosSAGB2025.Client.Shared.Forms;
@using SancionadosSAGB2025.Client.Shared.Partial.Dialog;
@using SancionadosSAGB2025.Client.Services
@inject AuthService AuthService
@inject IDialogService DialogService
@inject CatalagosServiceClient CatalagosService
@inject NavigationManager nav
<MainForm>
    <Main>
        @if (Elements.Count() > 0)
        {
            <CardForm>
                <Header>
                    <div class="d-flex justify-end mb-3">
                        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AgregarNivel">
                            Agregar Nuevo Nivel Jerarquico
                        </MudButton>
                    </div>

                </Header>
                <Content>
                    <MudDataGrid T="NivelJerarquicoEntidad" Items="@Elements" MultiSelection="true" ReadOnly="@_readOnly" QuickFilter="@_quickFilter">
                        <ToolBarContent>
                            <MudText Color="Color.Primary" Typo="Typo.h6"><b>Catalogo de Nivel Jerarquico</b></MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.Descripcion" />
                            <TemplateColumn>
                                <CellTemplate>
                                    <MudStack Row Justify="Justify.FlexEnd">
                                        <MudButton Variant="Variant.Filled"
                                                   StartIcon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Info"
                                                   OnClick="(() => EditarNombreNivel(context.Item))">
                                            Editar Nombre
                                        </MudButton>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>

                        </Columns>

                        <PagerContent>
                            <MudDataGridPager T="NivelJerarquicoEntidad" />
                        </PagerContent>
                    </MudDataGrid>
                </Content>
            </CardForm>

        }
        else
        {

            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />

            <MudText Typo="Typo.h6" Align="Align.Center">Cargando información...</MudText>
        }



    </Main>
</MainForm>



@code {
    private List<NivelJerarquicoEntidad> Elements = new List<NivelJerarquicoEntidad>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    private string _searchString;
    private NivelJerarquicoEntidad entidadFederativaEntidad = new NivelJerarquicoEntidad();
    private string token;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            token = await AuthService.GetTokenAsync();
            var response = await httpClient.GetFromJsonAsync<List<NivelJerarquicoEntidad>>($"api/Catalogos/ObtenerNivelJerarquico?token={token}");

            if (response is not null)
            {

                Elements = response!.OrderBy(x => x.Descripcion)!.ToList();

            }          
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    private async Task AgregarNivel()
    {

        var parameters = new DialogParameters<ModalAgregarOEditar<NivelJerarquicoEntidad>>
        {
            { z => z.Titulo, "Crear Nuevo Nivel Jerarquico" },
            {z => z.MensajeSnackBar, "Nivel Creado"},
            { z => z.BtnAceptar, "Aceptar" }
        };
        var dialog = await DialogService.ShowAsync<ModalAgregarOEditar<NivelJerarquicoEntidad>>("Agregar Nivel", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var descripcion = result.Data?.ToString();

            if (!string.IsNullOrEmpty(descripcion))
            {
                Elements.Add(new NivelJerarquicoEntidad { Descripcion = descripcion });
                Elements = Elements.OrderBy(e => e.Descripcion).ToList();
                StateHasChanged();
            }
        }

    }
    private async Task EditarNombreNivel(NivelJerarquicoEntidad entidad)
    {
        var parameters = new DialogParameters<ModalAgregarOEditar<NivelJerarquicoEntidad>>
        {
            { x => x.Entidad, entidad },
            { z => z.IsEdit, true },
            {z => z.token, token},
            { z => z.Titulo, "Editar Nivel Jerarquico" },
            {z => z.MensajeSnackBar, "Nivel Editado"},
            { z => z.BtnAceptar, "Guardar Cambios" },
            {z => z.nombreApi, "ActualizarNivelJerarquico"}
        };
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, MaxWidth = MaxWidth.ExtraExtraLarge, BackdropClick = false, FullWidth = false };
        var dialog = await DialogService.ShowAsync<ModalAgregarOEditar<NivelJerarquicoEntidad>>("Agregar Nivel", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var descripcion = result.Data?.ToString();

            if (!string.IsNullOrEmpty(descripcion))
            {
                // 👉 Editar en lugar de agregar
                entidad.Descripcion = descripcion;

                // Reordenamos la lista
                Elements = Elements.OrderBy(e => e.Descripcion).ToList();

                StateHasChanged();
            }
            else
            {
                nav.NavigateTo(nav.Uri, forceLoad: true);
            }
        }
    }

    // events
    void StartedEditingItem(NivelJerarquicoEntidad item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(NivelJerarquicoEntidad item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(NivelJerarquicoEntidad item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    private Func<NivelJerarquicoEntidad, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.Descripcion?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
               return true;

           return false;
       };
}