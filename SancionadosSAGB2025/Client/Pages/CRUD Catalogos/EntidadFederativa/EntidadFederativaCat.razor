@page "/EntidadFederativa"
@using System.Net.Http.Json
@inject HttpClient httpClient
@using SancionadosSAGB2025.Shared.Catalogos
@using SancionadosSAGB2025.Client.Shared.Partial.Cards;
@using SancionadosSAGB2025.Client.Shared.Forms;
@using SancionadosSAGB2025.Client.Shared.Partial.Dialog;
@using SancionadosSAGB2025.Client.Services
@inject IDialogService DialogService
@inject AuthService AuthService
@inject CatalagosServiceClient CatalagosService
@inject NavigationManager nav
<MainForm>
    <Main>
        @if (Elements.Count() > 0)
        {
            <CardForm>
                <Header>
                    <div class="d-flex justify-end mb-3">
                        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AgregarEntidad">
                            Agregar Nueva Entidad Federativa
                        </MudButton>
                    </div>

                </Header>
                <Content>
                    <MudDataGrid T="EntidadFederativaEntidad" Items="@Elements" MultiSelection="true" ReadOnly="@_readOnly" QuickFilter="@_quickFilter" EditMode="@(_isCellEditMode? DataGridEditMode.Cell: DataGridEditMode.Form)"
                                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                                 EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
                        <ToolBarContent>
                            <MudText Color="Color.Primary" Typo="Typo.h6"><b>Entidades Federativas</b></MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" Placeholder="Buscar"  Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <Columns>                            
                            <PropertyColumn Property="x => x.Descripcion"/>
                            <TemplateColumn >
                                <CellTemplate>
                                    <MudStack Row Justify="Justify.FlexEnd">
                                        <MudButton Variant="Variant.Filled"
                                                   StartIcon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Info"
                                                   OnClick="(() => EditarNombreEntidad(context.Item))">
                                            Editar Nombre
                                        </MudButton>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>

                        </Columns>
                        
                        <PagerContent>
                            <MudDataGridPager T="EntidadFederativaEntidad" />
                        </PagerContent>
                    </MudDataGrid>
                </Content>
            </CardForm>

        }
        else
        {            

            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />

            <MudText Typo="Typo.h6" Align="Align.Center">Cargando información...</MudText>
        }



    </Main>
</MainForm>



@code {
    private List<EntidadFederativaEntidad> Elements = new List<EntidadFederativaEntidad>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();   
    private bool _editTriggerRowClick;
    private string _searchString;
    private EntidadFederativaEntidad entidadFederativaEntidad = new EntidadFederativaEntidad();
    private string token;

    protected override async Task OnInitializedAsync()
    {
        try
        {
             token = await AuthService.GetTokenAsync();
            var response = await httpClient.GetFromJsonAsync<List<EntidadFederativaEntidad>>($"api/Catalogos/ObtenerEntidadFederativa?token={token}");

            if (response is not null)
            {

                Elements = response!.OrderBy(x => x.Descripcion)!.ToList();

            }    
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    private async Task AgregarEntidad()
    {

        var parameters = new DialogParameters<ModalAgregarOEditar<EntidadFederativaEntidad>>
        {            
            { z => z.Titulo, "Crear Entidad Federativa" },
            {z => z.MensajeSnackBar, "Entidad Creada"},
            { z => z.BtnAceptar, "Aceptar" }
        };
        var dialog = await DialogService.ShowAsync<ModalAgregarOEditar<EntidadFederativaEntidad>>("Agregar Entidad", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var descripcion = result.Data?.ToString();

            if (!string.IsNullOrEmpty(descripcion))
            {
                Elements.Add(new EntidadFederativaEntidad { Descripcion = descripcion });       
                Elements = Elements.OrderBy(e => e.Descripcion).ToList();
                StateHasChanged();
            }
        }

    }
    private async Task EditarNombreEntidad(EntidadFederativaEntidad entidad)
    {
        var parameters = new DialogParameters<ModalAgregarOEditar<EntidadFederativaEntidad>> 
        { 
            { x => x.Entidad, entidad }, 
            { z => z.IsEdit, true },
            {z => z.MensajeSnackBar, "Entidad Editada" },
            { z => z.Titulo, "Editar Entidad" },
            { z => z.BtnAceptar, "Guardar Cambios" },
              {z => z.token, token},
            { z => z.nombreApi, "ActulizarEntidadFederativa" }
        };
        var dialog = await DialogService.ShowAsync<ModalAgregarOEditar<EntidadFederativaEntidad>>("Agregar Entidad", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var descripcion = result.Data?.ToString();

            if (!string.IsNullOrEmpty(descripcion))
            {               
                entidad.Descripcion = descripcion;                
                Elements = Elements.OrderBy(e => e.Descripcion).ToList();
                StateHasChanged();
            }
            else
            {
                nav.NavigateTo(nav.Uri, forceLoad: true);
            }
        }
    }

    // events
    void StartedEditingItem(EntidadFederativaEntidad item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(EntidadFederativaEntidad item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(EntidadFederativaEntidad item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    private Func<EntidadFederativaEntidad, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.Descripcion?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
               return true;

           return false;
       };
}